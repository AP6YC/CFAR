var documenterSearchIndex = {"docs":
[{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This page serves as the contribution guide for the CFAR package. From top to bottom, the ways of contributing are:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"GitHub Issues: how to raise an issue with the project.\nJulia Development: how to download and interact with the package.\nGitFlow: how to directly contribute code to the package in an organized way on GitHub.\nDevelopment Details: how the internals of the package are currently setup if you would like to directly contribute code.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Please also see the Attribution to learn about the authors and sources of support for the project.","category":"page"},{"location":"man/contributing/#Issues","page":"Contributing","title":"Issues","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The main point of contact is the GitHub issues page for the project. This is the easiest way to contribute to the project, as any issue you find or request you have will be addressed there by the authors of the package. Depending on the issue, the authors will collaborate with you, and after making changes they will link a pull request which addresses your concern or implements your proposed changes.","category":"page"},{"location":"man/contributing/#Julia-Development","page":"Contributing","title":"Julia Development","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"As a Julia package, development follows the usual procedure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Clone the project from GitHub\nSwitch to or create the branch that you wish work on (see GitFlow).\nStart Julia at your development folder.\nInstantiate the package (i.e., download and install the package dependencies).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For example, you can get the package and startup Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"git clone git@github.com:AP6YC/CFAR.jl.git\njulia --project=.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn Julia, you must activate your project in the current REPL to point to the location/scope of installed packages. The above immediately activates the project when starting up Julia, but you may also separately startup the julia and activate the package with the interactive package manager via the ] syntax:julia\njulia> ]\n(@v1.9) pkg> activate .\n(CFAR) pkg>","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"You may run the package's unit tests after the above setup in Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> using Pkg\njulia> Pkg.instantiate()\njulia> Pkg.test()","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"or interactively though the Julia package manager with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(CFAR) pkg> instantiate\n(CFAR) pkg> test","category":"page"},{"location":"man/contributing/#GitFlow","page":"Contributing","title":"GitFlow","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The CFAR package follows the GitFlow git working model. The original post by Vincent Driessen outlines this methodology quite well, while Atlassian has a good tutorial as well. In summary:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Create a feature branch off of the develop branch with the name feature/<my-feature-name>.\nCommit your changes and push to this feature branch.\nWhen you are satisfied with your changes, initiate a GitHub pull request (PR) to merge the feature branch with develop.\nIf the unit tests pass, the feature branch will first be merged with develop and then be deleted.\nReleases will be periodically initiated from the develop branch and versioned onto the master branch.\nImmediate bug fixes circumvent this process through a hotfix branch off of master.","category":"page"},{"location":"man/contributing/#Development-Details","page":"Contributing","title":"Development Details","text":"","category":"section"},{"location":"man/contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"These docs are currently hosted as a static site on the GitHub pages platform. They are setup to be built and served in a separate branch called gh-pages from the master/development branches of the project.","category":"page"},{"location":"man/contributing/#Package-Structure","page":"Contributing","title":"Package Structure","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The CFAR project has the following file structure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"CFAR\n├── .github/workflows       // GitHub: workflows for testing and documentation.\n├── cluster                 // HPC: scripts and submission files for clusters.\n├── dockerfiles             // Docker: dockerfiles for experiment reproducibility.\n├── docs                    // Docs: documentation for the module.\n│   └───src                 //      Documentation source files.\n├── notebooks               // Source: experiment notebooks.\n├── scripts                 // Source: experiment scripts.\n├── src                     // Source: library source code.\n│   └───lib                 //      Library for the CFAR module.\n│       └───utils           //      Project utilities\n├── test                    // Test: Unit, integration, and environment tests.\n├── work                    // Data: datasets, results, plots, etc.\n│   ├───data                //      Source datasets for experiments.\n│   └───results             //      Destination for generated figures, etc.\n├── .gitattributes          // Git: LFS settings, languages, etc.\n├── .gitignore              // Git: .gitignore for the whole project.\n├── CODE_OF_CONDUCT.md      // Doc: the code of conduct for contributors.\n├── CONTRIBUTING.md         // Doc: contributing guide (points to this page).\n├── LICENSE                 // Doc: the license to the project.\n├── Project.toml            // Julia: the Pkg.jl dependencies of the project.\n└── README.md               // Doc: the top-level readme for the project.","category":"page"},{"location":"man/contributing/#Type-Aliases","page":"Contributing","title":"Type Aliases","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For convenience in when defining types and function signatures, this package uses the NumericalTypeAliases.jl package and the aliases therein. The documentation for the abstract and concrete types provided by NumericalTypeAliases.jl can be found here.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"In this package, data samples are always Real-valued, whereas class labels are integered. Furthermore, independent class labels are always Int because of the Julia native support for a given system's signed native integer type.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This project does not currently test for the support of arbitrary precision arithmetic because learning algorithms in general do not have a significant need for precision.","category":"page"},{"location":"man/contributing/#Attribution","page":"Contributing","title":"Attribution","text":"","category":"section"},{"location":"man/contributing/#Authors","page":"Contributing","title":"Authors","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This package is developed and maintained by Sasha Petrenko with sponsorship by the Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"If you simply have suggestions for improvement, Sasha Petrenko (<petrenkos@mst.edu>) is the current developer and maintainer of the CFAR package, so please feel free to reach out with thoughts and questions.","category":"page"},{"location":"man/dev-index/#dev-main-index","page":"Dev Index","title":"Developer Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This page lists the types and functions that are internal to the CFAR package. Because they are not part of the public API, these names might change relatively frequently between versions and so should not be relied upon.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"All internal names are listed in the Index, and each of these entries link to the docstrings in the Docs section.","category":"page"},{"location":"man/dev-index/#Index","page":"Dev Index","title":"Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This section contains a list of internal names that link to their corresponding Documentation.","category":"page"},{"location":"man/dev-index/#dev-index-methods","page":"Dev Index","title":"Methods","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [CFAR]\nOrder = [:function]","category":"page"},{"location":"man/dev-index/#dev-index-types","page":"Dev Index","title":"Types","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [CFAR]\nOrder = [:type]","category":"page"},{"location":"man/dev-index/#dev-index-types-2","page":"Dev Index","title":"Constants","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [CFAR]\nOrder = [:constant]","category":"page"},{"location":"man/dev-index/#dev-index-docs","page":"Dev Index","title":"Docs","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Documentation for all internal names are listed below.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Modules = [CFAR]\nPublic = false","category":"page"},{"location":"man/dev-index/#CFAR.ALPHABET","page":"Dev Index","title":"CFAR.ALPHABET","text":"ALPHABET\n\nDescription\n\nVector of alphabetical letters as Strings for discretized feature labels.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_CONFIG_DICT","page":"Dev Index","title":"CFAR.ARG_CONFIG_DICT","text":"ARGCONFIGDICT\n\nDescription\n\nCommon docstring: config dictionary argument.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_CONFIG_FILE","page":"Dev Index","title":"CFAR.ARG_CONFIG_FILE","text":"ARGCONFIGFILE\n\nDescription\n\nCommon docstring: config filename argument.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_FILENAME","page":"Dev Index","title":"CFAR.ARG_FILENAME","text":"ARG_FILENAME\n\nDescription\n\nCommon docstring: argument for a file name.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_P","page":"Dev Index","title":"CFAR.ARG_P","text":"ARG_P\n\nDescription\n\nCommon docstring: argument for a split ratio p.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_PLOT","page":"Dev Index","title":"CFAR.ARG_PLOT","text":"ARG_PLOT\n\nDescription\n\nCommon docstring: argument for an existing Plots.Plot object to plot atop.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_SIM_D","page":"Dev Index","title":"CFAR.ARG_SIM_D","text":"ARGSIMD\n\nDescription\n\nCommon docstring: argument for the simulation options dictionary.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_SIM_DIR_FUNC","page":"Dev Index","title":"CFAR.ARG_SIM_DIR_FUNC","text":"ARGSIMDIR_FUNC\n\nDescription\n\nCommon docstring: argument for a directory function\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_SIM_MS","page":"Dev Index","title":"CFAR.ARG_SIM_MS","text":"ARGSIMMS\n\nDescription\n\nCommon docstring: argument for the simulation MoverSplit dataset.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.ARG_SIM_OPTS","page":"Dev Index","title":"CFAR.ARG_SIM_OPTS","text":"ARGSIMOPTS\n\nDescription\n\nCommon docstring: argument for additional simulation options.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.BLOCK_TYPES","page":"Dev Index","title":"CFAR.BLOCK_TYPES","text":"BLOCK_TYPES\n\nDescription\n\nThe names of the blocks that are encountered during L2 experiments.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.COLORSCHEME","page":"Dev Index","title":"CFAR.COLORSCHEME","text":"COLORSCHEME\n\nDescription\n\nPlotting colorscheme.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.COMMON_DOC","page":"Dev Index","title":"CFAR.COMMON_DOC","text":"COMMON_DOC\n\nDescription\n\nDocstring prefix denoting that the constant is used as a common docstring element for other docstrings.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.DEFAULT_ART_OPTS_FILE","page":"Dev Index","title":"CFAR.DEFAULT_ART_OPTS_FILE","text":"Location of the ART options file for simulations.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.DEFAULT_MLP_OPTS_FILE","page":"Dev Index","title":"CFAR.DEFAULT_MLP_OPTS_FILE","text":"Location of the MLP options file for simulations.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.DEFAULT_N_PROCS","page":"Dev Index","title":"CFAR.DEFAULT_N_PROCS","text":"The default number of processes to start in distributed experiments on different platforms.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.DPI","page":"Dev Index","title":"CFAR.DPI","text":"The default plotting dots-per-inch for saving.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.DRWATSON_ARGS_DOC","page":"Dev Index","title":"CFAR.DRWATSON_ARGS_DOC","text":"DRWATSONARGSDOC\n\nDescription\n\nCommon docstring: the arguments to DrWatson-style directory functions.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.FONTFAMILY","page":"Dev Index","title":"CFAR.FONTFAMILY","text":"FONTFAMILY\n\nDescription\n\nPlotting fontfamily for all text.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.GRADIENTSCHEME","page":"Dev Index","title":"CFAR.GRADIENTSCHEME","text":"GRADIENTSCHEME\n\nDescription\n\nGradient scheme from a given color scheme\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.JSON_INDENT","page":"Dev Index","title":"CFAR.JSON_INDENT","text":"JSON_INDENT\n\nDescription\n\nConstant for pretty indentation spacing in JSON files.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.LETTER_VEC","page":"Dev Index","title":"CFAR.LETTER_VEC","text":"LETTER_VEC\n\nDescription\n\nTwo-letter alphabetical feature names.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.LOCAL_PYTHON_LIBS","page":"Dev Index","title":"CFAR.LOCAL_PYTHON_LIBS","text":"List of names of local libraries to make sure to install during setup.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.LOCAL_PYTHON_LIB_LOCATION","page":"Dev Index","title":"CFAR.LOCAL_PYTHON_LIB_LOCATION","text":"Location of the local Python libraries that are included in the project.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.LOG_STATES","page":"Dev Index","title":"CFAR.LOG_STATES","text":"LOG_STATES\n\nDescription\n\nThe enumerated states that an L2 logger log can be in.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.MLP","page":"Dev Index","title":"CFAR.MLP","text":"Name of the MLP library.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.MS_GROUP","page":"Dev Index","title":"CFAR.MS_GROUP","text":"MS_GROUP\n\nDescription\n\nConstant name for the JLD2/H5 group that data is saved to and loaded from.\n\nArguments\n\nms::MoverSplit: the MoverSplit dataset to save.\nfilename::AbstractString: the full file path as a string.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.OptionString","page":"Dev Index","title":"CFAR.OptionString","text":"OptionString\n\nDescription\n\nAlias for an option of type Union{AbstractString, Nothing}.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.PUBU_9","page":"Dev Index","title":"CFAR.PUBU_9","text":"PUBU_9\n\nDescription\n\nPurple-blue-9 color scheme.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.PUBU_9_RAW","page":"Dev Index","title":"CFAR.PUBU_9_RAW","text":"PUBU9RAW\n\nDescription\n\nPurple-blue-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.SAVE_MAP","page":"Dev Index","title":"CFAR.SAVE_MAP","text":"SAVE_MAP\n\nDescription\n\nDictionary mapping the names of result save types to the private wrapper functions that implement them.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.SERIALIZED_FIELDS","page":"Dev Index","title":"CFAR.SERIALIZED_FIELDS","text":"SERIALIZED_FIELDS\n\nDescription\n\nConstant declaring which fields/columns are serialized.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.YLGN_9","page":"Dev Index","title":"CFAR.YLGN_9","text":"YLGN_9\n\nDescription\n\nYellow-green-9 color scheme.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.YLGN_9_RAW","page":"Dev Index","title":"CFAR.YLGN_9_RAW","text":"YLGN9RAW\n\nDescription\n\nYellow-green-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#CFAR.AbstractAgent","page":"Dev Index","title":"CFAR.AbstractAgent","text":"abstract type AbstractAgent\n\nSummary\n\nL2 agent supertype.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Agent","page":"Dev Index","title":"CFAR.Agent","text":"struct Agent{T} <: CFAR.AbstractAgent\n\nSummary\n\nL2 AbstractAgent struct.\n\nFields\n\nagent::Any: The DDVFA module.\n\nparams::Dict: Parameters used for l2logging.\n\nscenario::CFAR.ExperienceQueueContainer: Container for the Experience Queue.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Agent-Tuple{Any, Any, AbstractDict}","page":"Dev Index","title":"CFAR.Agent","text":"Constructor for a Agent using the scenario dictionary and optional DDVFA keyword argument options.\n\nArguments\n\nscenario::AbstractDict: l2logger scenario as a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.Agent-Tuple{Any, Any}","page":"Dev Index","title":"CFAR.Agent","text":"Creates a DDVFA agent with an empty experience queue.\n\nArguments\n\nddvfa_opts::opts_DDVFA: the options struct used to initialize the DDVFA module and set the logging params.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.ConfigDict","page":"Dev Index","title":"CFAR.ConfigDict","text":"ConfigDict\n\nDescription\n\nDefinition of a configuration dictionary loaded from a config file.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.DSIC","page":"Dev Index","title":"CFAR.DSIC","text":"struct DSIC <: CFAR.VectoredData\n\nSummary\n\nDataSplitIndexedCombined (DSIC)\n\nA struct for encapsulating the components of supervised training in vectorized form.\n\nFields\n\ntrain::CFAR.VectorLabeledDataset: Training VectorLabeledDataset.\n\ntest::CFAR.VectorLabeledDataset: Test VectorLabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.DSIC-Tuple{CFAR.DataSplitCombined}","page":"Dev Index","title":"CFAR.DSIC","text":"DSIC(data::CFAR.DataSplitCombined) -> CFAR.DSIC\n\n\nSummary\n\nCreate a DSIC object from a DataSplitCombined.\n\nArguments\n\ndata::DataSplitCombined: the DataSplitCombined to separate into vectors of matrices.\n\nMethod List / Definition Locations\n\nDSIC(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/DSIC.jl:32.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.DataSplit","page":"Dev Index","title":"CFAR.DataSplit","text":"struct DataSplit <: CFAR.MatrixData\n\nSummary\n\nA basic struct for encapsulating the components of supervised training.\n\nFields\n\ntrain::CFAR.LabeledDataset: Training LabeledDataset.\n\nval::CFAR.LabeledDataset: Validation LabeledDataset.\n\ntest::CFAR.LabeledDataset: Test LabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.DataSplitCombined","page":"Dev Index","title":"CFAR.DataSplitCombined","text":"struct DataSplitCombined <: CFAR.MatrixData\n\nSummary\n\nA struct for combining training and validation data, containing only train and test splits.\n\nFields\n\ntrain::CFAR.LabeledDataset: Training LabeledDataset.\n\ntest::CFAR.LabeledDataset: Testing LabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.DataSplitCombined-Tuple{CFAR.LabeledDataset}","page":"Dev Index","title":"CFAR.DataSplitCombined","text":"DataSplitCombined(\n    data::CFAR.LabeledDataset;\n    p,\n    normalize,\n    scaling\n) -> CFAR.DataSplitCombined\n\n\nSummary\n\nReturns a DataSplitCombined from a LabeledDataset with a provided split ratio p.\n\nArguments\n\ndata::LabeledDataset: the original LabeledDataset to split into a DataSplitCombined.\np::Float=0.8: kwarg, the split ratio ∈ (0, 1).\n\nMethod List / Definition Locations\n\nDataSplitCombined(data; p, normalize, scaling)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/DataSplitCombined.jl:31.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.DataSplitIndexed","page":"Dev Index","title":"CFAR.DataSplitIndexed","text":"struct DataSplitIndexed <: CFAR.VectoredData\n\nSummary\n\nA struct for encapsulating the components of supervised training in vectorized form.\n\nFields\n\ntrain::CFAR.VectorLabeledDataset: Training VectorLabeledDataset.\n\nval::CFAR.VectorLabeledDataset: Validation VectorLabeledDataset.\n\ntest::CFAR.VectorLabeledDataset: Test VectorLabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Experience","page":"Dev Index","title":"CFAR.Experience","text":"struct Experience\n\nSummary\n\nExperience block for an agent.\n\nTaken from l2logger_template.\n\nFields\n\ntask_name::String: The task name.\n\nseq_nums::CFAR.SequenceNums: The sequence numbers (block and experience count).\n\nblock_type::String: The block type, valid values are ∈ [\"train\", \"test\"].\n\nupdate_model::Bool: Flag for updating the model (i.e., true is to train, false is to classify).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Experience-Tuple{AbstractString, CFAR.SequenceNums, AbstractString}","page":"Dev Index","title":"CFAR.Experience","text":"Experience(\n    task_name::AbstractString,\n    seq_nums::CFAR.SequenceNums,\n    block_type::AbstractString\n) -> CFAR.Experience\n\n\nSummary\n\nConstructs an Experience, setting the update_model field based upon the block type.\n\nArguments\n\ntask_name::AbstractString: the name of the current task.\nseq_nums::SequenceNums: the block and experience number of the Experience.\nblock_type::AbstractString: the block type ∈ [\"train\", \"test\"]. Using \"train\" sets update_model to true, \"test\" to false.\n\nMethod List / Definition Locations\n\nExperience(task_name, seq_nums, block_type)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/experience.jl:76.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.ExperienceQueue","page":"Dev Index","title":"CFAR.ExperienceQueue","text":"ExperienceQueue\n\nDescription\n\nAlias for a queue of Experiences.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.ExperienceQueueContainer","page":"Dev Index","title":"CFAR.ExperienceQueueContainer","text":"struct ExperienceQueueContainer\n\nSummary\n\nContainer for the ExperienceQueue and some statistics about it.\n\nFields\n\nqueue::DataStructures.Deque{CFAR.Experience}: The ExperienceQueue itself.\n\nstats::Dict{String, Any}: The statistics about the queue. NOTE These statistics reflect the queue at construction, not after any processing.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.ExperienceQueueContainer-Tuple{AbstractDict}","page":"Dev Index","title":"CFAR.ExperienceQueueContainer","text":"ExperienceQueueContainer(\n    scenario_dict::AbstractDict\n) -> CFAR.ExperienceQueueContainer\n\n\nSummary\n\nCreates a queue of Experiences from the scenario dictionary.\n\nArguments\n\nscenario_dict::AbstractDict: the scenario dictionary.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer(scenario_dict)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:135.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.ExperienceQueueContainer-Tuple{}","page":"Dev Index","title":"CFAR.ExperienceQueueContainer","text":"ExperienceQueueContainer() -> CFAR.ExperienceQueueContainer\n\n\nSummary\n\nCreates an empty ExperienceQueueContainer with an empty queue and zeroed stats.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:110.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.Features","page":"Dev Index","title":"CFAR.Features","text":"Features\n\nDescription\n\nDefinition of features as a matrix of floating-point numbers of dimension (featuredim, nsamples).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Label","page":"Dev Index","title":"CFAR.Label","text":"Label\n\nDescription\n\nAlias declaring that a supervised label is a string.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.LabeledDataset","page":"Dev Index","title":"CFAR.LabeledDataset","text":"struct LabeledDataset\n\nSummary\n\nA single dataset of Features, Targets, and human-readable string Labels.\n\nFields\n\nx::Matrix{Float64}: Collection of Features in the labeled dataset.\n\ny::Vector{Int64}: Targets corresponding to the Features.\n\nlabels::Vector{String}: Human-readable Labels corresponding to the Targets values.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Labels","page":"Dev Index","title":"CFAR.Labels","text":"Labels\n\nDescription\n\nDefinition of labels as a vector of strings.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.MatrixData","page":"Dev Index","title":"CFAR.MatrixData","text":"abstract type MatrixData <: CFAR.TTDataset\n\nSummary\n\nAbstract type for data structs that represent features as matrices.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.MoverSplit","page":"Dev Index","title":"CFAR.MoverSplit","text":"struct MoverSplit\n\nSummary\n\nDefinition of a split of data with one part remaining static and the other moving.\n\nFields\n\nstatic::CFAR.DataSplitCombined: The static DataSplitCombined.\n\nmover::CFAR.DataSplitCombined: The moving DataSplitCombined.\n\nconfig::Dict{Any, Any}: The config used to generate the mover.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.MoverSplit-Tuple{CFAR.LabeledDataset, CFAR.LabeledDataset, Dict{Any, Any}}","page":"Dev Index","title":"CFAR.MoverSplit","text":"MoverSplit(\n    static::CFAR.LabeledDataset,\n    mover::CFAR.LabeledDataset,\n    config::Dict{Any, Any}\n) -> CFAR.MoverSplit\n\n\nSummary\n\nConstructor for a MoverSplit taking a preconstructed static and mover LabeledDatasets along with a split parameter p.\n\nArguments\n\nstatic::LabeledDataset: the static part of the dataset.\nmover::LabeledDataset: the moving part of the datset.\n\nMethod List / Definition Locations\n\nMoverSplit(static, mover, config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/MoverSplit.jl:36.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.SCTMoverSplit","page":"Dev Index","title":"CFAR.SCTMoverSplit","text":"struct SCTMoverSplit\n\nSummary\n\nDefinition of a split of data with one part remaining static and the other moving.\n\nFields\n\ndata::Vector{CFAR.DataSplitCombined}: TODO\n\nconfig::Dict{Any, Any}: The config used to generate the mover.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.SCTMoverSplit-Tuple{Vector{CFAR.LabeledDataset}, Dict{Any, Any}}","page":"Dev Index","title":"CFAR.SCTMoverSplit","text":"SCTMoverSplit(\n    data::Vector{CFAR.LabeledDataset},\n    config::Dict{Any, Any}\n) -> CFAR.SCTMoverSplit\n\n\nSummary\n\nConstructor for a SCTMoverSplit taking a preconstructed static and mover LabeledDatasets along with a split parameter p.\n\nArguments\n\nstatic::LabeledDataset: the static part of the dataset.\nmover::LabeledDataset: the moving part of the datset.\n\nMethod List / Definition Locations\n\nSCTMoverSplit(data, config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/SCTMoverSplit.jl:31.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.Sample","page":"Dev Index","title":"CFAR.Sample","text":"Sample\n\nDescription\n\nAlias declaring a sample as a vector of floating-point values.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Samples","page":"Dev Index","title":"CFAR.Samples","text":"Samples\n\nDescription\n\nAlias declaring that a sample batch is a vector of samples.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.SequenceNums","page":"Dev Index","title":"CFAR.SequenceNums","text":"struct SequenceNums\n\nSummary\n\nSequence numbers for a block and Experience.\n\nTaken from l2logger_template.\n\nFields\n\nblock_num::Int64: The block number.\n\nexp_num::Int64: The experience number.\n\ntask_num::Int64: The task-specific count.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.SerializedFeatures","page":"Dev Index","title":"CFAR.SerializedFeatures","text":"struct SerializedFeatures\n\nSummary\n\nSerializer for Features for saving with Arrow.\n\nFields\n\ndim1::Vector{Float64}: The first dimension of the Features.\n\ndim2::Vector{Float64}: The second dimension of the Features.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.SerializedFeatures-Tuple{Matrix{Float64}}","page":"Dev Index","title":"CFAR.SerializedFeatures","text":"SerializedFeatures(\n    data::Matrix{Float64}\n) -> CFAR.SerializedFeatures\n\n\nSummary\n\nConstructs a SerializedFeatures from a set of Features.\n\nArguments\n\ndata::Features: the Features to serialize.\n\nMethod List / Definition Locations\n\nSerializedFeatures(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:471.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.StatsDict","page":"Dev Index","title":"CFAR.StatsDict","text":"StatsDict\n\nDescription\n\nAlias for a statistics dictionary being string keys mapping to any object.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.TTDataset","page":"Dev Index","title":"CFAR.TTDataset","text":"abstract type TTDataset\n\nSummary\n\nAbstract supertype for all train/test dataset structs in this library.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Target","page":"Dev Index","title":"CFAR.Target","text":"Target\n\nDescription\n\nAlias declaring that a supervised target is an integer.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.Targets","page":"Dev Index","title":"CFAR.Targets","text":"Targets\n\nDescription\n\nDefinition of targets as a vector of integers.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.VectorLabeledDataset","page":"Dev Index","title":"CFAR.VectorLabeledDataset","text":"struct VectorLabeledDataset\n\nSummary\n\nA single dataset of vectored labeled data with Features, Targets, and human-readable string Labels.\n\nFields\n\nx::Vector{Matrix{Float64}}: A vector of Features matrices.\n\ny::Vector{Vector{Int64}}: A vector of Targets corresponding to the Features.\n\nlabels::Vector{String}: String Labels corresponding to the Targets.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#CFAR.VectorLabeledDataset-Tuple{CFAR.LabeledDataset}","page":"Dev Index","title":"CFAR.VectorLabeledDataset","text":"VectorLabeledDataset(\n    data::CFAR.LabeledDataset\n) -> CFAR.VectorLabeledDataset\n\n\nSummary\n\nConstructor for a VectorLabeledDataset transformed from an existing LabeledDataset.\n\nArguments\n\ndata::LabeledDataset: the LabeledDataset to turn into a corresponding vectorized version.\n\nMethod List / Definition Locations\n\nVectorLabeledDataset(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/VectorLabeledDataset.jl:38.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.VectoredData","page":"Dev Index","title":"CFAR.VectoredData","text":"abstract type VectoredData <: CFAR.TTDataset\n\nSummary\n\nAbstract type for data structs that represent features as vectors of matrices.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#Base.show-Tuple{IO, CFAR.Agent}","page":"Dev Index","title":"Base.show","text":"show(io::IO, agent::CFAR.Agent)\n\n\nSummary\n\nOverload of the show function for Agent.\n\nArguments\n\nio::IO: the current IO stream.\ncont::AbstractAgent: the Agent to print/display.\n\nMethod List / Definition Locations\n\nshow(io, agent)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:101.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, CFAR.ExperienceQueueContainer}","page":"Dev Index","title":"Base.show","text":"show(io::IO, cont::CFAR.ExperienceQueueContainer)\n\n\nSummary\n\nOverload of the show function for ExperienceQueueContainer.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, cont)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:175.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DataStructures.Deque{CFAR.Experience}}","page":"Dev Index","title":"Base.show","text":"show(io::IO, queue::DataStructures.Deque{CFAR.Experience})\n\n\nSummary\n\nOverload of the show function for ExperienceQueue.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, queue)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:157.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR._save_plot-Tuple{Plots.Plot, AbstractString}","page":"Dev Index","title":"CFAR._save_plot","text":"_save_plot(p::Plots.Plot, filename::AbstractString) -> Any\n\n\nSummary\n\nWrapper for how figures are saved in the CFAR project.\n\nArguments\n\np::Plots.Plot: the Plot object to save.\nfilename::AbstractString: the full file path as a string.\n\nMethod List / Definition Locations\n\n_save_plot(p, filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:760.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR._save_table-Tuple{Any, AbstractString}","page":"Dev Index","title":"CFAR._save_table","text":"_save_table(table, filename::AbstractString) -> Any\n\n\nSummary\n\nWrapper for how tables are saved in the CFAR project.\n\nArguments\n\ntable: the table object to save.\nfilename::AbstractString: the full file path as a string.\n\nMethod List / Definition Locations\n\n_save_table(table, filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:771.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.conda_gc_disable-Tuple{}","page":"Dev Index","title":"CFAR.conda_gc_disable","text":"conda_gc_disable()\n\n\nSummary\n\nWrapper for disabling the PythonCall garbage collector.\n\nMethod List / Definition Locations\n\nconda_gc_disable()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:98.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.conda_gc_enable-Tuple{}","page":"Dev Index","title":"CFAR.conda_gc_enable","text":"conda_gc_enable()\n\n\nSummary\n\nWrapper for reenabling the PythonCall garbage collector.\n\nMethod List / Definition Locations\n\nconda_gc_enable()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:109.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.conda_run-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.conda_run","text":"conda_run(cmd_string::AbstractString) -> Any\n\n\nSummary\n\nRuns a provided command with the correct CondaPkg.jl Python environment.\n\nArguments\n\ncmd_string::AbstractString: the Python command to run as a string, excluding the initial 'python' part.\n\nMethod List / Definition Locations\n\nconda_run(cmd_string)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:43.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.conda_setup-Tuple{}","page":"Dev Index","title":"CFAR.conda_setup","text":"conda_setup()\n\n\nSummary\n\nSets up the Conda dependencies, including local libraries.\n\nMethod List / Definition Locations\n\nconda_setup()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:81.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.config_dir-Tuple","page":"Dev Index","title":"CFAR.config_dir","text":"config_dir(args...) -> String\n\n\nSummary\n\nPoints to the configs directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nconfig_dir(args)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/drwatson.jl:56.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.config_to_params-Tuple{Dict{Any, Any}, Dict{String, Any}}","page":"Dev Index","title":"CFAR.config_to_params","text":"config_to_params(\n    opts::Dict{Any, Any},\n    pargs::Dict{String, Any}\n) -> Tuple{Dict{Any, Any}, Dict{String, Any}}\n\n\nSummary\n\nParses the config dictionary to a parameters dictionary for use in a distributed simulation.\n\nMethod List / Definition Locations\n\nconfig_to_params(opts, pargs)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/drivers.jl:36.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.cvi_exp-Tuple{AbstractDict}","page":"Dev Index","title":"CFAR.cvi_exp","text":"cvi_exp(opts::AbstractDict)\n\n\nSummary\n\nRuns a single CVI experiment, for use in a distributed simulation.\n\nMethod List / Definition Locations\n\ncvi_exp(opts)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/drivers.jl:126.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.data_dir-Tuple","page":"Dev Index","title":"CFAR.data_dir","text":"data_dir(args...) -> String\n\n\nSummary\n\nPoints to the data directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\ndata_dir(args)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/drwatson.jl:44.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.deserialize_df!-Tuple{DataFrames.DataFrame}","page":"Dev Index","title":"CFAR.deserialize_df!","text":"deserialize_df!(df::DataFrames.DataFrame)\n\n\nSummary\n\nDeserializes the serialized fields of a DataFrame according to SERIALIZED_FIELDS.\n\nArguments\n\ndf::DataFrames.DataFrame: the dataframe containing serialized fields.\n\nMethod List / Definition Locations\n\ndeserialize_df!(df)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:571.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.deserialize_features-Tuple{CFAR.SerializedFeatures}","page":"Dev Index","title":"CFAR.deserialize_features","text":"deserialize_features(\n    el::CFAR.SerializedFeatures\n) -> Matrix{Float64}\n\n\nSummary\n\nDeserializes a set of SerializedFeatures and constructs a set of Features.\n\nArguments\n\nel::SerializedFeatures: the SerializedFeatures to deserialize.\n\nMethod List / Definition Locations\n\ndeserialize_features(el)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:545.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.dist_exp_parse","page":"Dev Index","title":"CFAR.dist_exp_parse","text":"dist_exp_parse() -> Any\ndist_exp_parse(description::AbstractString) -> Any\n\n\nSummary\n\nParses the command line for common options in distributed experiments.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\ndist_exp_parse()\ndist_exp_parse(description)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/args.jl:74.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.evaluate_agent!-Tuple{CFAR.Agent, CFAR.Experience, CFAR.VectoredData}","page":"Dev Index","title":"CFAR.evaluate_agent!","text":"evaluate_agent!(\n    agent::CFAR.Agent,\n    experience::CFAR.Experience,\n    data::CFAR.VectoredData\n) -> Dict\n\n\nSummary\n\nEvaluates a single agent on a single experience, training or testing as needed.\n\nArguments\n\nagent::Agent: the Agent to evaluate.\nexp::Experience: the Experience to use for training/testing.\n\nMethod List / Definition Locations\n\nevaluate_agent!(agent, experience, data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:152.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.exp_parse","page":"Dev Index","title":"CFAR.exp_parse","text":"exp_parse() -> Any\nexp_parse(description::AbstractString) -> Any\n\n\nSummary\n\nParses the command line for common options in serial (non-distributed) experiments.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\nexp_parse()\nexp_parse(description)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/args.jl:35.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.feature_preprocess-Tuple{StatsBase.ZScoreTransform, Real, AbstractMatrix{T} where T<:Real}","page":"Dev Index","title":"CFAR.feature_preprocess","text":"feature_preprocess(\n    dt::StatsBase.ZScoreTransform,\n    scaling::Real,\n    data::AbstractMatrix{T} where T<:Real\n) -> Any\n\n\nSummary\n\nPreprocesses one dataset of features, scaling and squashing along the feature axes.\n\nArguments\n\ndt::ZScoreTransform: the Gaussian statistics of the features.\nscaling::Real: the sigmoid scaling parameter.\ndata::RealMatrix: the 2-D matrix of features to transform.\n\nMethod List / Definition Locations\n\nfeature_preprocess(dt, scaling, data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/load.jl:54.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.fields_to_dict!-Tuple{AbstractDict, Any}","page":"Dev Index","title":"CFAR.fields_to_dict!","text":"fields_to_dict!(dict::AbstractDict, opts)\n\n\nSummary\n\nAdds entry to a dictionary from a struct with fields.\n\nMeant to be used with StatsDict.\n\nArguments\n\ndict::AbstractDict: the StatsDict dictionary to add entries to.\nopts::Any: a struct containing fields, presumably of options, to add as key-value entries to the dict.\n\nMethod List / Definition Locations\n\nfields_to_dict!(dict, opts)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:205.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_gaussians-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.gen_gaussians","text":"gen_gaussians(\n    config_file::AbstractString\n) -> CFAR.MoverSplit\n\n\nSummary\n\nGenerate the Gaussian dataset from the parameters specified in the provided file.\n\nArguments\n\nconfig_file::AbstractString: the config file name as a string.\n\nMethod List / Definition Locations\n\ngen_gaussians(config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:171.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_gaussians-Tuple{Dict{Any, Any}}","page":"Dev Index","title":"CFAR.gen_gaussians","text":"gen_gaussians(config::Dict{Any, Any}) -> CFAR.MoverSplit\n\n\nSummary\n\nGenerates Gaussian distributed samples from the provided configuration dictionary.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\n\nMethod List / Definition Locations\n\ngen_gaussians(config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:113.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_scenario-Tuple{AbstractString, CFAR.DSIC}","page":"Dev Index","title":"CFAR.gen_scenario","text":"gen_scenario(\n    exp_top::AbstractString,\n    data_indexed::CFAR.DSIC\n)\n\n\nSummary\n\nGenerates a configuration and scenario from a dataset.\n\nArguments\n\nexp_top::AbstractString:\n\nMethod List / Definition Locations\n\ngen_scenario(exp_top, data_indexed)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data.jl:149.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_scenarios-Tuple{Dict{String, CFAR.DSIC}}","page":"Dev Index","title":"CFAR.gen_scenarios","text":"gen_scenarios(data::Dict{String, CFAR.DSIC})\n\n\nSummary\n\nGenerates all L2 scenarios as inferred from an existing named set of DSIC datasets.\n\nArguments\n\ndata::Dict{String, DSIC}: the named set of DSIC datasets to use for generating scenario files.\n\nMethod List / Definition Locations\n\ngen_scenarios(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data.jl:267.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_sct_gaussians-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.gen_sct_gaussians","text":"gen_sct_gaussians(\n    config_file::AbstractString\n) -> CFAR.SCTMoverSplit\n\n\nSummary\n\nGenerate the Single-Class-Task Gaussian dataset from the parameters specified in the provided file.\n\nArguments\n\nconfig_file::AbstractString: the config file name as a string.\n\nMethod List / Definition Locations\n\ngen_sct_gaussians(config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:237.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.gen_sct_gaussians-Tuple{Dict{Any, Any}}","page":"Dev Index","title":"CFAR.gen_sct_gaussians","text":"gen_sct_gaussians(\n    config::Dict{Any, Any}\n) -> CFAR.SCTMoverSplit\n\n\nSummary\n\nGenerates Single-Class-Task Gaussian distributed samples from the provided configuration dictionary.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\n\nMethod List / Definition Locations\n\ngen_sct_gaussians(config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:185.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_argparsesettings","page":"Dev Index","title":"CFAR.get_argparsesettings","text":"get_argparsesettings() -> Any\nget_argparsesettings(description::AbstractString) -> Any\n\n\nSummary\n\nCommon function for how ArgParseSettings are generated in the project.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\nget_argparsesettings()\nget_argparsesettings(description)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/args.jl:19.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.get_dist-Tuple{AbstractMatrix{T} where T<:Real}","page":"Dev Index","title":"CFAR.get_dist","text":"get_dist(\n    data::AbstractMatrix{T} where T<:Real\n) -> StatsBase.ZScoreTransform\n\n\nSummary\n\nGet the distribution parameters for preprocessing.\n\nArguments\n\ndata::RealMatrix: a 2-D matrix of features for computing the Gaussian statistics of.\n\nMethod List / Definition Locations\n\nget_dist(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/load.jl:42.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_dists-Tuple{Dict{Any, Any}}","page":"Dev Index","title":"CFAR.get_dists","text":"get_dists(\n    config::Dict{Any, Any}\n) -> Vector{Distributions.MvNormal}\n\n\nSummary\n\nGets the distribution generators based upon the config parameters.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\n\nMethod List / Definition Locations\n\nget_dists(config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:76.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_gaussian_config-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.get_gaussian_config","text":"get_gaussian_config(config_file::AbstractString) -> Any\n\n\nSummary\n\nLoads the Gaussian distribution parameters from the provided config file.\n\nArguments\n\nconfig_file::AbstractString: the config file name as a string.\n\nMethod List / Definition Locations\n\nget_gaussian_config(config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:37.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_index_from_name-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:AbstractString","page":"Dev Index","title":"CFAR.get_index_from_name","text":"get_index_from_name(\n    labels::Array{T<:AbstractString, 1},\n    name::AbstractString\n) -> Any\n\n\nSummary\n\nGets an integer index of where a string name appears in a list of strings.\n\nArguments\n\nlabels::Vector{T} where T <: AbstractString: the list of strings to search.\nname::AbstractString: the name to search for in the list of labels.\n\nMethod List / Definition Locations\n\nget_index_from_name(labels, name)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:134.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_manual_split-Tuple{AbstractMatrix{T} where T<:Real, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"CFAR.get_manual_split","text":"get_manual_split(\n    data::AbstractMatrix{T} where T<:Real,\n    targets::AbstractVector{T} where T<:Integer;\n    p\n) -> Tuple{Tuple{Any, Any}, Tuple{Any, Any}}\n\n\nSummary\n\nTeturns a manual train/test x/y split from a data matrix and labels using MLDataUtils.\n\nArguments\n\ndata::RealMatrix: the feature data to split into training and testing.\ntargets::IntegerVector: the labels corresponding to the data to split into training and testing.\np::Float=0.8: kwarg, the split ratio ∈ (0, 1).\n\nMethod List / Definition Locations\n\nget_manual_split(data, targets; p)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/LabeledDataset.jl:67.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_mlp-Tuple{}","page":"Dev Index","title":"CFAR.get_mlp","text":"get_mlp() -> PythonCall.Core.Py\n\n\nSummary\n\nLoads and returns a handle to the local mlp Python library.\n\nMethod List / Definition Locations\n\nget_mlp()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:32.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_mover_data-Tuple{AbstractDict}","page":"Dev Index","title":"CFAR.get_mover_data","text":"get_mover_data(\n    opts::AbstractDict;\n    config_file\n) -> Union{CFAR.MoverSplit, CFAR.SCTMoverSplit}\n\n\nSummary\n\nLoad the mover dataset.\n\nMethod List / Definition Locations\n\nget_mover_data(opts; config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/drivers.jl:101.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_mover_direction-Tuple{Dict{Any, Any}}","page":"Dev Index","title":"CFAR.get_mover_direction","text":"get_mover_direction(config::Dict{Any, Any}) -> Any\n\n\nSummary\n\nGenerates a vector representing the direction of the mover's line.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\n\nMethod List / Definition Locations\n\nget_mover_direction(config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:254.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_mover_line-Tuple{Dict{Any, Any}}","page":"Dev Index","title":"CFAR.get_mover_line","text":"get_mover_line(\n    config::Dict{Any, Any};\n    n_points,\n    length\n) -> Any\n\n\nSummary\n\nGenerates a dataset of points representing the mover's direction of traversal.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\nn_points::Integer=2: kwarg, number of points along the line to return.\nlength::Float=10.0: kwarg, length of the line.\n\nMethod List / Definition Locations\n\nget_mover_line(config; n_points, length)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:79.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_n_procs-Tuple{}","page":"Dev Index","title":"CFAR.get_n_procs","text":"get_n_procs() -> Int64\n\n\nSummary\n\nReturns the default number of processes to start in distributed experiments on different platforms.\n\nMethod List / Definition Locations\n\nget_n_procs()\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/args.jl:59.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_pylib-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.get_pylib","text":"get_pylib(lib::AbstractString) -> PythonCall.Core.Py\n\n\nSummary\n\nLoads and returns a handle to the provided local Python library.\n\nArguments\n\nlib::AbstractString: the string name of the local Python library to load.\n\nMethod List / Definition Locations\n\nget_pylib(lib)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:17.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_shift-Tuple{Dict{Any, Any}, Float64}","page":"Dev Index","title":"CFAR.get_shift","text":"get_shift(config::Dict{Any, Any}, s::Float64) -> Any\n\n\nSummary\n\nGets the shift vector from the configuration and distance to traverse.\n\nArguments\n\nconfig::ConfigDict: the config parameters as a dictionary.\ns::Float: the distance to travel along the line\n\nMethod List / Definition Locations\n\nget_shift(config, s)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:272.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_table_row-Tuple{CFAR.DataSplitCombined, AbstractString}","page":"Dev Index","title":"CFAR.get_table_row","text":"get_table_row(\n    data::CFAR.DataSplitCombined,\n    label::AbstractString\n) -> Vector{Any}\n\n\nSummary\n\nConstructs a DataFrame table row for saving to an Arrow table.\n\nArguments\n\ndata::DataSplitCombined: the data split.\nlabel::AbstractString: the string label for the data split.\n\nMethod List / Definition Locations\n\nget_table_row(data, label)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:489.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_windows-Tuple{AbstractVector{T} where T<:Real, Integer}","page":"Dev Index","title":"CFAR.get_windows","text":"get_windows(\n    vs::AbstractVector{T} where T<:Real,\n    n::Integer\n) -> Any\n\n\nSummary\n\nConstructs a windowed matrix of a vector.\n\nArguments\n\nvs::RealVector: the original vector.\nn::Integer: the size of the sliding window.\n\nMethod List / Definition Locations\n\nget_windows(vs, n)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:401.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_x-Tuple{CFAR.DataSplitCombined}","page":"Dev Index","title":"CFAR.get_x","text":"get_x(data::CFAR.DataSplitCombined) -> Matrix{Float64}\n\n\nSummary\n\nReturns the concatenated training and testing features data from a DataSplitCombined.\n\nArguments\n\ndata::DataSplitCombined: the DataSplitCombined to get the combined train/test features from.\n\nMethod List / Definition Locations\n\nget_x(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/DataSplitCombined.jl:78.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.get_y-Tuple{CFAR.DataSplitCombined}","page":"Dev Index","title":"CFAR.get_y","text":"get_y(data::CFAR.DataSplitCombined) -> Vector{Int64}\n\n\nSummary\n\nReturns the concatenated training and testing targets data from a DataSplitCombined.\n\nArguments\n\ndata::DataSplitCombined: the DataSplitCombined to get the combined train/test targets from.\n\nMethod List / Definition Locations\n\nget_y(data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/DataSplitCombined.jl:91.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.initialize_exp_queue!-Tuple{CFAR.ExperienceQueueContainer, AbstractDict}","page":"Dev Index","title":"CFAR.initialize_exp_queue!","text":"initialize_exp_queue!(\n    eqc::CFAR.ExperienceQueueContainer,\n    scenario_dict::AbstractDict\n)\n\n\nSummary\n\nInitializes an ExperienceQueueContainer from the provided scenario dictionary.\n\nArguments\n\neqc::ExperienceQueueContainer: the container with the queue and stats to initialize.\nscenario_dict::AbstractDict: the dictionary with the scenario regimes and block types.\n\nMethod List / Definition Locations\n\ninitialize_exp_queue!(eqc, scenario_dict)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/scenario.jl:56.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.is_complete-Tuple{CFAR.Agent}","page":"Dev Index","title":"CFAR.is_complete","text":"is_complete(agent::CFAR.Agent) -> Bool\n\n\nSummary\n\nChecks if the Agent is done with its scenario queue.\n\nArguments\n\nagent::Agent: the agent to test scenario completion on.\n\nMethod List / Definition Locations\n\nis_complete(agent)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:121.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.json_load-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.json_load","text":"json_load(filepath::AbstractString) -> Any\n\n\nSummary\n\nLoads the JSON file, interpreted as a dictionary.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to load.\n\nMethod List / Definition Locations\n\njson_load(filepath)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/common.jl:96.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.json_save-Tuple{AbstractString, AbstractDict}","page":"Dev Index","title":"CFAR.json_save","text":"json_save(filepath::AbstractString, dict::AbstractDict)\n\n\nSummary\n\nSaves the dictionary to a JSON file.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to save to.\ndict::AbstractDict: the dictionary to save to the file.\n\nMethod List / Definition Locations\n\njson_save(filepath, dict)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/common.jl:83.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_all-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.load_all","text":"load_all(\n    filename::AbstractString\n) -> Tuple{DataFrames.DataFrame, Arrow.Table}\n\n\nSummary\n\nLoads the Arrow file as a DataFrame.\n\nArguments\n\nfilename::AbstractString: location of the Arrow file.\n\nMethod List / Definition Locations\n\nload_all(filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:585.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_art_sim_opts","page":"Dev Index","title":"CFAR.load_art_sim_opts","text":"load_art_sim_opts() -> Any\nload_art_sim_opts(file::AbstractString) -> Any\n\n\nSummary\n\nLoads the ART simulation options in the provided file with a default.\n\nArguments\n\nfile::AbstractString: the YAML file to load, default art.yml.\n\nMethod List / Definition Locations\n\nload_art_sim_opts()\nload_art_sim_opts(file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/experiments.jl:17.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.load_config-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.load_config","text":"load_config(config_file::AbstractString) -> Any\n\n\nSummary\n\nWrapper for loading the configuration file with the provided filename.\n\nArguments\n\nconfig_file::AbstractString: the config file name as a string.\n\nMethod List / Definition Locations\n\nload_config(config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/file.jl:28.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_dataset-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.load_dataset","text":"load_dataset(filename::AbstractString) -> Tuple{Any, Any}\n\n\nSummary\n\nLoads a local dataset.\n\nArguments\n\nfilename::AbstractString: the location of the file to load with a default value.\n\nMethod List / Definition Locations\n\nload_dataset(filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/load.jl:8.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_datasets","page":"Dev Index","title":"CFAR.load_datasets","text":"load_datasets() -> Dict{String, CFAR.LabeledDataset}\nload_datasets(\n    topdir::AbstractString\n) -> Dict{String, CFAR.LabeledDataset}\n\n\nSummary\n\nLoads all of the data sets from the local data package folder.\n\nArguments\n\ntopdir::AbstractString = data_dir(\"data-package\"):\n\nMethod List / Definition Locations\n\nload_datasets()\nload_datasets(topdir)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/load.jl:71.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.load_mlp_sim_opts","page":"Dev Index","title":"CFAR.load_mlp_sim_opts","text":"load_mlp_sim_opts() -> Any\nload_mlp_sim_opts(file::AbstractString) -> Any\n\n\nSummary\n\nLoads the MLP simulation options in the provided file with a default.\n\nArguments\n\nfile::AbstractString: the YAML file to load, default mlp.yml.\n\nMethod List / Definition Locations\n\nload_mlp_sim_opts()\nload_mlp_sim_opts(file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/experiments.jl:42.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.load_moversplit-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.load_moversplit","text":"load_moversplit(filename::AbstractString) -> Any\n\n\nSummary\n\nLoads and returns the gaussian data from the provided filename.\n\nArguments\n\nfilename::AbstractString: the full file path as a string.\n\nMethod List / Definition Locations\n\nload_moversplit(filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:445.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_opts-Tuple{Union{Nothing, AbstractString}, Dict{String, Any}}","page":"Dev Index","title":"CFAR.load_opts","text":"load_opts(\n    config_file::Union{Nothing, AbstractString},\n    pargs::Dict{String, Any}\n) -> Any\n\n\nSummary\n\nLoads the options for the experiment, using the pargs config file if nothing` is provided.\n\nArguments\n\nconfig_file::OptionString: The configuration file to load.\npargs::Dict{String, Any}: The parsed arguments from the terminal.\n\nMethod List / Definition Locations\n\nload_opts(config_file, pargs)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/drivers.jl:82.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.load_vec_datasets","page":"Dev Index","title":"CFAR.load_vec_datasets","text":"load_vec_datasets() -> Dict{String, CFAR.DSIC}\nload_vec_datasets(p::Float64) -> Dict{String, CFAR.DSIC}\nload_vec_datasets(\n    p::Float64,\n    seed::Real\n) -> Dict{String, CFAR.DSIC}\n\n\nSummary\n\nMethod List / Definition Locations\n\nload_vec_datasets()\nload_vec_datasets(p)\nload_vec_datasets(p, seed)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data.jl:119.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#CFAR.log_data-Tuple{PythonCall.Core.Py, CFAR.Experience, Dict, Dict}","page":"Dev Index","title":"CFAR.log_data","text":"log_data(\n    data_logger::PythonCall.Core.Py,\n    experience::CFAR.Experience,\n    results::Dict,\n    params::Dict;\n    status\n) -> PythonCall.Core.Py\n\n\nSummary\n\nLogs data from an L2 Experience.\n\nArguments\n\ndata_logger::PythonCall.Py: the l2logger DataLogger.\nexp::Experience: the Experience that the AbstractAgent just processed.\nresults::Dict: the results from the AbstractAgent's Experience.\nstatus::AbstractString: string expressing if the Experience was processed.\n\nMethod List / Definition Locations\n\nlog_data(data_logger, experience, results, params; status)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:190.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.paper_results_dir-Tuple","page":"Dev Index","title":"CFAR.paper_results_dir","text":"paper_results_dir(args...) -> String\n\n\nSummary\n\nDrWatson-style paper results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\npaper_results_dir(args)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/drwatson.jl:68.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_2d_attrs-Union{Tuple{T}, Tuple{DataFrames.DataFrame, Vector{T}}} where T<:AbstractString","page":"Dev Index","title":"CFAR.plot_2d_attrs","text":"plot_2d_attrs(\n    df::DataFrames.DataFrame,\n    attrs::Array{T<:AbstractString, 1};\n    avg,\n    n,\n    title,\n    labels,\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nPlots the 2D performances trends.\n\nArguments\n\ndf::DataFrame: the collected simulation results.\nattrs::Vector{T} where T <: AbstractString: the columns in the dataframe as a list of strings to create plotlines for.\navg::Bool=false: optional, default false, flag to compute the windowed averages of the trends.\nn::Integer=10: optional, default 10, the size of the average sliding window if that option is used.\n\nMethod List / Definition Locations\n\nplot_2d_attrs(df, attrs; avg, n, title, labels, kwargs...)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:335.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_2d_errlines-Union{Tuple{T}, Tuple{DataFrames.DataFrame, Vector{T}}} where T<:AbstractString","page":"Dev Index","title":"CFAR.plot_2d_errlines","text":"plot_2d_errlines(\n    df::DataFrames.DataFrame,\n    attrs::Array{T<:AbstractString, 1};\n    n,\n    title,\n    labels,\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nPlots the 2D performances trends.\n\nArguments\n\ndf::DataFrame: the collected simulation results.\nattrs::Vector{T} where T <: AbstractString: the columns in the dataframe as a list of strings to create plotlines for.\n\nMethod List / Definition Locations\n\nplot_2d_errlines(df, attrs; n, title, labels, kwargs...)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:424.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_2d_errlines_double-Union{Tuple{T}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Vector{T}, Vector{T}}} where T<:AbstractString","page":"Dev Index","title":"CFAR.plot_2d_errlines_double","text":"plot_2d_errlines_double(\n    df::DataFrames.DataFrame,\n    df2::DataFrames.DataFrame,\n    attrs::Array{T<:AbstractString, 1},\n    attrs2::Array{T<:AbstractString, 1};\n    n,\n    title,\n    labels,\n    labels2,\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nPlots the 2D performances trends.\n\nArguments\n\ndf::DataFrame: the collected simulation results.\nattrs::Vector{T} where T <: AbstractString: the columns in the dataframe as a list of strings to create plotlines for.\n\nMethod List / Definition Locations\n\nplot_2d_errlines_double(\n    df,\n    df2,\n    attrs,\n    attrs2;\n    n,\n    title,\n    labels,\n    labels2,\n    kwargs...\n)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:483.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_2d_errlines_overlay-Union{Tuple{T}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Vector{T}, Vector{T}}} where T<:AbstractString","page":"Dev Index","title":"CFAR.plot_2d_errlines_overlay","text":"plot_2d_errlines_overlay(\n    df::DataFrames.DataFrame,\n    df2::DataFrames.DataFrame,\n    attrs::Array{T<:AbstractString, 1},\n    attrs2::Array{T<:AbstractString, 1};\n    n,\n    title,\n    labels,\n    labels2,\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nPlots the 2D performances trends.\n\nArguments\n\ndf::DataFrame: the collected simulation results.\nattrs::Vector{T} where T <: AbstractString: the columns in the dataframe as a list of strings to create plotlines for.\n\nMethod List / Definition Locations\n\nplot_2d_errlines_overlay(\n    df,\n    df2,\n    attrs,\n    attrs2;\n    n,\n    title,\n    labels,\n    labels2,\n    kwargs...\n)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:624.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_covellipses-Tuple{Plots.Plot, Dict{Any, Any}}","page":"Dev Index","title":"CFAR.plot_covellipses","text":"plot_covellipses(p::Plots.Plot, config::Dict{Any, Any})\n\n\nSummary\n\nPlots the covariance ellipses from the config on top of an existing plot.\n\nArguments\n\np::Plots.Plot: an existing Plots.Plot object.\nconfig::ConfigDict: the config parameters as a dictionary.\n\nMethod List / Definition Locations\n\nplot_covellipses(p, config)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:47.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_mover-Tuple{CFAR.MoverSplit}","page":"Dev Index","title":"CFAR.plot_mover","text":"plot_mover(ms::CFAR.MoverSplit) -> Plots.Plot\n\n\nSummary\n\nPlots the mover line plot with scattered data points, covariance lines, and mover line.\n\nArguments\n\nms::MoverSplit: the MoverSplit dataset.\n\nMethod List / Definition Locations\n\nplot_mover(ms)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:106.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.plot_mover-Tuple{CFAR.SCTMoverSplit}","page":"Dev Index","title":"CFAR.plot_mover","text":"plot_mover(\n    ms::CFAR.SCTMoverSplit;\n    length,\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nPlots the mover line plot with scattered data points, covariance lines, and mover line.\n\nArguments\n\nms::MoverSplit: the MoverSplit dataset.\n\nMethod List / Definition Locations\n\nplot_mover(ms; length, kwargs...)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:151.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.results_dir-Tuple","page":"Dev Index","title":"CFAR.results_dir","text":"results_dir(args...) -> String\n\n\nSummary\n\nPoints to the results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nresults_dir(args)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/drwatson.jl:32.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.run_exp-Tuple{}","page":"Dev Index","title":"CFAR.run_exp","text":"run_exp(; config_file)\n\n\nSummary\n\nRuns a distributed experiment.\n\nArguments\n\nconfig_file::OptionString: The configuration file to load.\n\nMethod List / Definition Locations\n\nrun_exp(; config_file)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/drivers.jl:454.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.run_scenario-Tuple{CFAR.Agent, CFAR.VectoredData, PythonCall.Core.Py}","page":"Dev Index","title":"CFAR.run_scenario","text":"run_scenario(\n    agent::CFAR.Agent,\n    data::CFAR.VectoredData,\n    data_logger::PythonCall.Core.Py\n)\n\n\nSummary\n\nRuns an agent's scenario.\n\nArguments\n\nagent::Agent: a struct that contains an Agent and scenario.\ndata_logger::PythonCall.Py: a l2logger object.\n\nMethod List / Definition Locations\n\nrun_scenario(agent, data, data_logger)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/agents.jl:214.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.sanitize_block_type-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.sanitize_block_type","text":"sanitize_block_type(block_type::AbstractString)\n\n\nSummary\n\nSanitize the selected block type against the BLOCK_TYPES constant.\n\nArguments\n\nblock_type::AbstractString: the selected block type.\n\nMethod List / Definition Locations\n\nsanitize_block_type(block_type)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/common.jl:60.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.sanitize_in_list-Union{Tuple{T}, Tuple{AbstractString, T, Vector{T}}} where T","page":"Dev Index","title":"CFAR.sanitize_in_list","text":"sanitize_in_list(\n    selection_type::AbstractString,\n    selection,\n    acceptable::Array{T, 1}\n)\n\n\nSummary\n\nSanitizes a selection within a list of acceptable options.\n\nArguments\n\nselection_type::AbstractString: a string describing the option in case it is misused.\nselection::Any: a single selection from a list.\n\nMethod List / Definition Locations\n\nsanitize_in_list(selection_type, selection, acceptable)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/common.jl:45.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.sanitize_log_state-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.sanitize_log_state","text":"sanitize_log_state(log_state::AbstractString)\n\n\nSummary\n\nSanitize the selected log state against the LOG_STATES constant.\n\nArguments\n\nlog_state::AbstractString: the selected log state.\n\nMethod List / Definition Locations\n\nsanitize_log_state(log_state)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/l2/common.jl:71.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.save_all-Tuple{CFAR.MoverSplit, AbstractString}","page":"Dev Index","title":"CFAR.save_all","text":"save_all(\n    ms::CFAR.MoverSplit,\n    filename::AbstractString\n) -> DataFrames.DataFrame\n\n\nSummary\n\nSaves the MoverSplit as an Arrow file for transferability.\n\nArguments\n\nms::MoverSplit:\n\nMethod List / Definition Locations\n\nsave_all(ms, filename)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:506.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.save_plot-Tuple{Plots.Plot, AbstractString, AbstractString, AbstractString}","page":"Dev Index","title":"CFAR.save_plot","text":"save_plot(\n    p::Plots.Plot,\n    fig_name::AbstractString,\n    exp_top::AbstractString,\n    exp_name::AbstractString\n)\n\n\nSummary\n\nSaves the plot to the both the local results directory and to the paper directory.\n\nArguments\n\np::Plots.Plot: the handle of the plot to save.\nfig_name::AbstractString: the name of the figure file itself.\nexp_top::AbstractString: the top of the experiment directory.\nexp_name::AbstractString: the name of the experiment itself.\n\nMethod List / Definition Locations\n\nsave_plot(p, fig_name, exp_top, exp_name)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:794.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.save_sim-Tuple{Function, AbstractDict, AbstractDict}","page":"Dev Index","title":"CFAR.save_sim","text":"save_sim(\n    dir_func::Function,\n    d::AbstractDict,\n    fulld::AbstractDict\n)\n\n\nSummary\n\nCommon save function for simulations.\n\nArguments\n\ndir_func::Function: the function that provides the correct file path with provided strings.\nd::AbstractDict: the simulation options dictionary.\nfulld::AbstractDict: the dictionary containing the sim results.\n\nMethod List / Definition Locations\n\nsave_sim(dir_func, d, fulld)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/experiments.jl:64.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.scatter_gaussian!-Tuple{Plots.Plot, CFAR.DataSplitCombined}","page":"Dev Index","title":"CFAR.scatter_gaussian!","text":"scatter_gaussian!(\n    p::Plots.Plot,\n    data::CFAR.DataSplitCombined\n)\n\n\nSummary\n\nCombines and plots data from a gaussian distribution.\n\nArguments\n\np::Plots.Plot: the plot handle to add the gaussians to.\ndata::DataSplitCombined: the data to plot.\n\nMethod List / Definition Locations\n\nscatter_gaussian!(p, data)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:18.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.setup_local_pylib-Tuple{AbstractString}","page":"Dev Index","title":"CFAR.setup_local_pylib","text":"setup_local_pylib(lib::AbstractString)\n\n\nSummary\n\nSets up a local Python library with .\n\nArguments\n\nlib::AbstractString: the string name of the local library to setup.\n\nMethod List / Definition Locations\n\nsetup_local_pylib(lib)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/py.jl:61.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.shift_mover-Tuple{CFAR.MoverSplit, Float64}","page":"Dev Index","title":"CFAR.shift_mover","text":"shift_mover(\n    ms::CFAR.MoverSplit,\n    s::Float64\n) -> CFAR.MoverSplit\n\n\nSummary\n\nMoves the mover component of a MoverSplit a distance of s.\n\nArguments\n\nms::MoverSplit: the datset containing a mover to shift.\nconfig::ConfigDict: the config parameters as a dictionary.\ns::Float: the distance to travel along the line\n\nMethod List / Definition Locations\n\nshift_mover(ms, s)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:307.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.shift_mover-Tuple{CFAR.SCTMoverSplit, Float64}","page":"Dev Index","title":"CFAR.shift_mover","text":"shift_mover(\n    ms::CFAR.SCTMoverSplit,\n    s::Float64\n) -> CFAR.SCTMoverSplit\n\n\nSummary\n\nMoves the mover component of a SCTMoverSplit a distance of s.\n\nArguments\n\nms::SCTMoverSplit: the datset containing a mover to shift.\nconfig::ConfigDict: the config parameters as a dictionary.\ns::Float: the distance to travel along the line\n\nMethod List / Definition Locations\n\nshift_mover(ms, s)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:359.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.sigmoid-Tuple{Real}","page":"Dev Index","title":"CFAR.sigmoid","text":"sigmoid(x::Real) -> Any\n\n\nSummary\n\nReturns the sigmoid function on x.\n\nArguments\n\nx::Real: the float or int to compute the sigmoid function upon.\n\nMethod List / Definition Locations\n\nsigmoid(x)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/load.jl:32.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.sliding_avg-Tuple{AbstractVector{T} where T<:Real, Integer}","page":"Dev Index","title":"CFAR.sliding_avg","text":"sliding_avg(\n    vs::AbstractVector{T} where T<:Real,\n    n::Integer\n) -> Any\n\n\nSummary\n\nComputes the averages of a sliding window along a vector.\n\nArguments\n\nvs::RealVector: the vector to compute windowed averages of.\nn::Integer: the size of the sliding window.\n\nMethod List / Definition Locations\n\nsliding_avg(vs, n)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/plot.jl:316.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.split_data-Tuple{CFAR.LabeledDataset}","page":"Dev Index","title":"CFAR.split_data","text":"split_data(\n    data::CFAR.LabeledDataset;\n    p\n) -> Tuple{CFAR.LabeledDataset, CFAR.LabeledDataset}\n\n\nSummary\n\nSplits a LabeledDataset into two LabeledDatasets\n\nArguments\n\ndata::LabeledDataset: the original dataset to split.\np::Float=0.8: kwarg, the split ratio ∈ (0, 1).\n\nMethod List / Definition Locations\n\nsplit_data(data; p)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data/LabeledDataset.jl:81.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.split_datasets-Tuple{Dict{String, CFAR.LabeledDataset}}","page":"Dev Index","title":"CFAR.split_datasets","text":"split_datasets(\n    datasets::Dict{String, CFAR.LabeledDataset};\n    p\n) -> Dict{String, CFAR.DataSplitCombined}\n\n\nSummary\n\nSplits the provided LabeledDatasets into train/test splits with a provided ratio p.\n\nArgument\n\ndatasets::Dict{String, LabeledDataset}: a named mapping to a set of LabeledDatasets.\np::Float=0.8: kwarg, the split ratio ∈ (0, 1).\n\nMethod List / Definition Locations\n\nsplit_datasets(datasets; p)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data.jl:71.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.train_test_mlp_mc-Tuple{AbstractDict, CFAR.MoverSplit, Function, AbstractDict}","page":"Dev Index","title":"CFAR.train_test_mlp_mc","text":"train_test_mlp_mc(\n    d::AbstractDict,\n    ms::CFAR.MoverSplit,\n    dir_func::Function,\n    opts::AbstractDict\n)\n\n\nSummary\n\nTrain and test an MLP on the MoverSplit dataset.\n\nArguments\n\nd::AbstractDict: the simulation options dictionary.\nms::MoverSplit: the MoverSplit dataset to train and test on.\ndir_func::Function: the function that provides the correct file path with provided strings.\nopts::AbstractDict: additional options for the simulation.\n\nMethod List / Definition Locations\n\ntrain_test_mlp_mc(d, ms, dir_func, opts)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/experiments.jl:202.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.train_test_sfam_mc-Tuple{AbstractDict, CFAR.MoverSplit, Function, AbstractDict}","page":"Dev Index","title":"CFAR.train_test_sfam_mc","text":"train_test_sfam_mc(\n    d::AbstractDict,\n    ms::CFAR.MoverSplit,\n    dir_func::Function,\n    opts::AbstractDict\n)\n\n\nSummary\n\nTrain and test SFAM on the MoverSplit dataset in parallel.\n\nArguments\n\nd::AbstractDict: the simulation options dictionary.\nms::MoverSplit: the MoverSplit dataset to train and test on.\ndir_func::Function: the function that provides the correct file path with provided strings.\nopts::AbstractDict: additional options for the simulation.\n\nMethod List / Definition Locations\n\ntrain_test_sfam_mc(d, ms, dir_func, opts)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/experiments.jl:91.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.vec_vec_to_matrix-Tuple{AbstractVector}","page":"Dev Index","title":"CFAR.vec_vec_to_matrix","text":"vec_vec_to_matrix(vec_vec::AbstractVector) -> Any\n\n\nSummary\n\nTurns a vector of vectors into a matrix.\n\nAssumes that the shape of the vector of vectors is square.\n\nArguments\n\nvec_vec::AbstractVector: a vector of vectors of numerical values.\n\nMethod List / Definition Locations\n\nvec_vec_to_matrix(vec_vec)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/gaussians.jl:19.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.vectorize_datasets-Tuple{Dict{String, CFAR.DataSplitCombined}}","page":"Dev Index","title":"CFAR.vectorize_datasets","text":"vectorize_datasets(\n    datasets::Dict{String, CFAR.DataSplitCombined}\n) -> Dict{String, CFAR.DSIC}\n\n\nSummary\n\nTurns a named set of DataSplitCombineds into vectorized DSIC datasets.\n\nArguments\n\ndatasets::Dict{String, DataSplitCombined}: the named set of DataSplitCombineds to turn into corresponding vectorized DSIC.\n\nMethod List / Definition Locations\n\nvectorize_datasets(datasets)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/data.jl:105.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#CFAR.work_dir-Tuple","page":"Dev Index","title":"CFAR.work_dir","text":"work_dir(args...) -> String\n\n\nSummary\n\nPoints to the work directory containing raw datasets, processed datasets, and results.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nwork_dir(args)\n\ndefined at /home/runner/work/CFAR/CFAR/src/lib/utils/drwatson.jl:20.\n\n\n\n\n\n","category":"method"},{"location":"man/full-index/#main-index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This page lists the core methods and types of the Julia component of the CFAR project.","category":"page"},{"location":"man/full-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section enumerates the names exported by the package, each of which links to its corresponding Documentation.","category":"page"},{"location":"man/full-index/#index-modules","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [CFAR]\nOrder = [:module]","category":"page"},{"location":"man/full-index/#index-methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [CFAR]\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [CFAR]\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [CFAR]\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#index-docs","page":"Index","title":"Docs","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section lists the documentation for every exported name of the CFAR package.","category":"page"},{"location":"man/full-index/#index-modules-docs","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [CFAR]\nPrivate = false\nOrder = [:module]","category":"page"},{"location":"man/full-index/#CFAR.CFAR","page":"Index","title":"CFAR.CFAR","text":"A module encapsulating the experimental driver code for the CFAR project.\n\nImports\n\nThe following names are imported by the package as dependencies:\n\nAdaptiveResonance\nArgParse\nArrow\nBase\nCSV\nClusterValidityIndices\nColorSchemes\nCondaPkg\nCore\nDataFrames\nDataStructures\nDelimitedFiles\nDistributed\nDistributions\nDocStringExtensions\nDrWatson\nElasticArrays\nJLD2\nJSON\nNumericalTypeAliases\nPkg\nPlots\nProgressMeter\nRandom\nStatsBase\nStatsPlots\n\nExports\n\nThe following names are exported and available when using the package:\n\nCFAR_VERSION\n\n\n\n\n\n","category":"module"},{"location":"man/full-index/#index-functions-docs","page":"Index","title":"Functions","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [CFAR]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types-docs","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [CFAR]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants-docs","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [CFAR]\nPrivate = false\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#CFAR.CFAR_VERSION","page":"Index","title":"CFAR.CFAR_VERSION","text":"CFAR_VERSION\n\nDescription\n\nA constant that contains the version of the installed CFAR package.\n\nThis value is computed at compile time, so it may be used to programmatically verify the version of CFAR that is installed in case a compat entry in your Project.toml is missing or otherwise incorrect.\n\n\n\n\n\n","category":"constant"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"EditURL = \"/home/runner/work/CFAR/CFAR/docs/examples/tutorials/julia.jl\"","category":"page"},{"location":"examples/tutorials/julia/#julia","page":"Julia Tutorial","title":"Julia Tutorial","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"(Image: Source code) (Image: notebook) (Image: compat) (Image: Author) (Image: Update time)","category":"page"},{"location":"examples/tutorials/julia/#Overview","page":"Julia Tutorial","title":"Overview","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This demo shows how to interact with Julia to get started with DCCR experiments.","category":"page"},{"location":"examples/tutorials/julia/#Setup","page":"Julia Tutorial","title":"Setup","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"Just as in most languages, dependencies are usually loaded first in Julia scripts. These dependences are included through either using or import statements:","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"# `using` brings all of the names that are exported by the package into this context\nusing Dates\n\n# `import` simply brings the name itself without exports, so to use sub components\nimport Downloads","category":"page"},{"location":"examples/tutorials/julia/#Running-Julia-Code","page":"Julia Tutorial","title":"Running Julia Code","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"To run Julia code, open the REPL in a command terminal with julia:","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"TODO","category":"page"},{"location":"examples/tutorials/julia/#Additional-Reading","page":"Julia Tutorial","title":"Additional Reading","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This example reveals just the tip of the iceberg of how to write and run Julia code. To learn more about the Julia programming language, see the extensive Official Julia Documentation. The Manual contains all information necessary to understand the syntax and workings of the language itself. The Base documentation lists the essential native types and utilities embedded in the language. The Standard Library is a collection of additional packages that are so useful that they are always available in Julia without additional installation.","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"EditURL = \"/home/runner/work/CFAR/CFAR/docs/examples/index.md\"","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section contains some examples using the CFAR package with topics ranging from how to the internals of package work to practical examples on different datasets.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples are separated into the following sections:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Tutorials: basic Julia examples that also include how low-level routines work in this package.\nExperiments: how to run experiments in the package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#Tutorials","page":"Examples","title":"Tutorials","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples demonstrate some low-level usage of the Julia programming language and subroutines of the CFAR project itself.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"grid-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"card grid-card\">\n<div class=\"grid-card-cover\">\n<div class=\"grid-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This demo provides a quick example of how to run a Julia script.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n<div class=\"grid-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Julia Tutorial","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#examples-attribution","page":"Examples","title":"Attribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Icons used for the covers of these demo cards are attributed to the following sites:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Official Julia logo graphics","category":"page"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"TODO","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using CFAR, Dates\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: header)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"These pages serve as the official documentation for the CFAR (Catastrophic Forgetting and Adaptive Resonance) project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The CFAR project is a development workspace for experiments targeting the analysis of catastrophic forgetting in the use of Adaptive Resonance Theory (ART) algorithms. Due to the broad nature of the research, many tools and types of experiments are involved. As a result, please see the relevant documentation sections about the various programming languages, tools, and experiments involved throughout the repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is developed and maintained by Sasha Petrenko <petrenkos@mst.edu> on behalf of the Missouri University of Science and Technology (MS&T) Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is split into the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"../examples/index.md\",\n    \"man/full-index.md\",\n    \"man/dev-index.md\"\n]\nDepth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Package Guide provides a tutorial to the full usage of the package, while Examples gives sample workflows with the various experiments of the project.","category":"page"},{"location":"#About-These-Docs","page":"Home","title":"About These Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Though several different programming languages are used throughout the project, these docs are built around the Julia component of the project using the Documenter.jl package.","category":"page"},{"location":"#Documentation-Build","page":"Home","title":"Documentation Build","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation was built using Documenter.jl with the following version and OS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CFAR, Dates # hide\nprintln(\"CFAR v$(CFAR_VERSION) docs built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"}]
}
